{
    "files": {
        "uniswap_v3_periphery/PoolAddress.sol": {
            "source": {
                "git": {
                    "repo": "git@github.com:Uniswap/v3-periphery.git",
                    "commit": "697c2474757ea89fec12a4e6db16a574fe259610",
                    "path": "contracts/libraries/PoolAddress.sol"
                }
            },
            "patches": [
                {
                    "oldStart": 1,
                    "oldLines": 6,
                    "newStart": 1,
                    "newLines": 6,
                    "lines": [
                        " // SPDX-License-Identifier: GPL-2.0-or-later",
                        "-pragma solidity 0.8.23;",
                        "+pragma solidity >=0.5.0;",
                        " ",
                        " /// @title Provides functions for deriving a pool address from the factory, tokens, and the fee",
                        " library PoolAddress {",
                        "     bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;"
                    ]
                },
                {
                    "oldStart": 16,
                    "oldLines": 9,
                    "newStart": 16,
                    "newLines": 13,
                    "lines": [
                        "     /// @param tokenA The first token of a pool, unsorted",
                        "     /// @param tokenB The second token of a pool, unsorted",
                        "     /// @param fee The fee level of the pool",
                        "     /// @return Poolkey The pool details with ordered token0 and token1 assignments",
                        "-    function getPoolKey(address tokenA, address tokenB, uint24 fee) internal pure returns (PoolKey memory) {",
                        "+    function getPoolKey(",
                        "+        address tokenA,",
                        "+        address tokenB,",
                        "+        uint24 fee",
                        "+    ) internal pure returns (PoolKey memory) {",
                        "         if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);",
                        "         return PoolKey({token0: tokenA, token1: tokenB, fee: fee});",
                        "     }",
                        " "
                    ]
                },
                {
                    "oldStart": 26,
                    "oldLines": 19,
                    "newStart": 30,
                    "newLines": 17,
                    "lines": [
                        "     /// @param factory The Uniswap V3 factory contract address",
                        "     /// @param key The PoolKey",
                        "     /// @return pool The contract address of the V3 pool",
                        "     function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {",
                        "-        require(key.token0 < key.token1, \"PoolAddress: wrong token order\");",
                        "+        require(key.token0 < key.token1);",
                        "         pool = address(",
                        "-            uint160(",
                        "-                uint256(",
                        "-                    keccak256(",
                        "-                        abi.encodePacked(",
                        "-                            hex\"ff\",",
                        "-                            factory,",
                        "-                            keccak256(abi.encode(key.token0, key.token1, key.fee)),",
                        "-                            POOL_INIT_CODE_HASH",
                        "-                        )",
                        "+            uint256(",
                        "+                keccak256(",
                        "+                    abi.encodePacked(",
                        "+                        hex'ff',",
                        "+                        factory,",
                        "+                        keccak256(abi.encode(key.token0, key.token1, key.fee)),",
                        "+                        POOL_INIT_CODE_HASH",
                        "                     )",
                        "                 )",
                        "             )",
                        "         );"
                    ]
                }
            ]
        },
        "chainlink/AggregatorV3Interface.sol": {
            "source": {
                "git": {
                    "repo": "org-25111032@github.com:smartcontractkit/chainlink.git",
                    "commit": "dd2c5ef1a71d821d97f199573b04df71dcab6172",
                    "path": "contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol"
                }
            }, 
            "patches": [
                {
                    "oldStart": 1,
                    "oldLines": 20,
                    "newStart": 1,
                    "newLines": 19,
                    "lines": [
                      " // SPDX-License-Identifier: MIT",
                      " pragma solidity ^0.8.0;",
                      " ",
                      " interface AggregatorV3Interface {",
                      "-    function decimals() external view returns (uint8);",
                      "+  function decimals() external view returns (uint8);",
                      " ",
                      "-    function description() external view returns (string memory);",
                      "+  function description() external view returns (string memory);",
                      " ",
                      "-    function version() external view returns (uint256);",
                      "+  function version() external view returns (uint256);",
                      " ",
                      "-    function getRoundData(uint80 _roundId)",
                      "-        external",
                      "-        view",
                      "-        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);",
                      "+  function getRoundData(",
                      "+    uint80 _roundId",
                      "+  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);",
                      " ",
                      "-    function latestRoundData()",
                      "-        external",
                      "-        view",
                      "-        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);",
                      "+  function latestRoundData()",
                      "+    external",
                      "+    view",
                      "+    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);",
                      " }"
                    ]
                  }
            ]
        }
    }
}