import { readFileSync } from 'fs';
import * as path from 'path';
import * as solc from 'solc';
import type { Command } from './Command';
import { buildSol, buildYul } from './Compiler';

function printError(err: any) {
  console.error();
  console.error(`\x1b[31mError\x1b[0m: ${err}`);
  console.error();
  printUsage();
}

function printUsage() {
  console.error(`usage: npx @compound-finance/quark {targetFile}.yul`);
  console.error(`usage: npx @compound-finance/quark {targetFile}.sol {functionName} \t**Experimental`);
  console.error();
  console.error();
  process.exit(1);
}

let [_n, _f, target, fnName] = process.argv;

(async () => {
  if (!target) {
    printUsage();
  }

  let source: string;
  try {
    source = readFileSync(target, 'utf-8');
  } catch (e) {
    printError(e);
  }

  let command: Command;
  if (target.endsWith('.sol')) {
    if (!fnName) {
      printError('you must specify a function when using [experimental] Solidity');
    }

    command = await buildSol(source!, fnName, solc.compile);
  } else if (target.endsWith('.yul')) {
    command = await buildYul(source!, solc.compile);
  } else {
    printError('Please select a .sol or .yul file');
  }

  if (process.stdout.isTTY) {
    let cast;
    if (process.env.CALL_FROM) {
      cast = `cast call --from ${process.env.CALL_FROM}`;
    } else {
      cast = "cast send --interactive";
    }

    console.log(`Trx script: 0x${command!.bytecode}`);
    console.log(``)
    console.log(`\nGoerli cast:\n\t${cast} --rpc-url https://goerli-eth.compound.finance "0x412e71DE37aaEBad89F1441a1d7435F2f8B07270" "0x${command!.bytecode}"`);
    console.log(`\nOptimism Goerli cast:\n\t${cast} --rpc-url https://goerli.optimism.io "0x12D356e5C3b05aFB0d0Dbf0999990A6Ec3694e23" "0x${command!.bytecode}"`);
    console.log(`\nArbitrum Goerli cast:\n\t${cast} --rpc-url https://goerli-rollup.arbitrum.io/rpc "0x12D356e5C3b05aFB0d0Dbf0999990A6Ec3694e23" "0x${command!.bytecode}"`);
    console.log(`\nArbitrum Mainnet cast:\n\t${cast} --rpc-url https://arb1.arbitrum.io/rpc "0xC9c445CAAC98B23D1b7439cD75938e753307b2e6" "0x${command!.bytecode}"`);
  } else {
    process.stdout.write(`0x${command!.bytecode}`);
  }
})();
